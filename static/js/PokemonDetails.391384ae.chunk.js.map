{"version":3,"sources":["components/WindowRoute.tsx","components/PokemonDetailSkeleton.tsx","components/Chip.tsx","screens/PokemonDetails.tsx"],"names":["StyledToolbar","styled","Toolbar","StyledAppBar","AppBar","Container","backgroundcolor","PosedContainer","posed","active","x","transition","duration","inactive","withRouter","props","React","useState","isOpened","setIsOpened","isClosed","setIsClosed","stackId","setStackId","useContext","WindowStackContext","pop","popById","isAtTop","push","history","location","backgroundColor","title","children","pose","Number","useEffect","close","setTimeout","state","prevPath","replace","goBack","renderDialogContent","initialPose","withParent","className","src","alt","IconButton","edge","color","onClick","MDIcon","icon","Typography","data-testid","style","flex","variant","window","Dialog","fullScreen","open","onClose","PokemonDetailSkeleton","margin","width","height","StyledChip","div","Chip","value","convertDashedToReadable","Pokemons","PokemonContext","pokemon","resetPokemon","fetchPokemon","isFetchingPokemon","MyPokemonContext","catchPokemon","isOwned","updateNickname","release","nickname","setNickname","nicknameInput","useRef","match","ownedPokemon","params","name","placeholderSrc","image_url","effect","species","types","map","pokemonType","index","type","abilities","pokemonAbility","ability","moves","pokemonMove","move","TextField","inputRef","label","fullWidth","placeholder","onChange","e","target","Button","a","current","focus"],"mappings":"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","file":"static/js/PokemonDetails.391384ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport posed from 'react-pose';\r\nimport { WindowStackContext } from '../contexts/WindowStackContext';\r\nimport MDIcon from './MDIcon';\r\n\r\nconst StyledToolbar = styled(Toolbar)`\r\n  && {\r\n    min-height: 47px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    .left {\r\n      display: flex;\r\n      align-items: center;\r\n      text-transform: capitalize;\r\n    }\r\n\r\n    .logo {\r\n      height: 33px;\r\n      position: absolute;\r\n      width: 100%;\r\n      display: flex;\r\n      justify-content: center;\r\n      left: 0;\r\n\r\n      @media only screen and (max-width: 800px) {\r\n        display: none;\r\n      }\r\n\r\n      img {\r\n        height: 100%;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledAppBar = styled(AppBar)`\r\n  && {\r\n    color: inherit;\r\n    background-color: white;\r\n    box-shadow: 1px 1px 10px #0000002b;\r\n  }\r\n`;\r\n\r\nconst Container = styled('div')<{ backgroundcolor: string | null }>`\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  padding-top: 47px;\r\n  background: ${({ backgroundcolor }) => backgroundcolor || 'white'};\r\n\r\n  .screen-container {\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nconst PosedContainer = posed(Container)({\r\n  active: { x: 0, transition: { duration: 300 } },\r\n  inactive: { x: -150, transition: { duration: 700 } },\r\n});\r\n\r\nconst Transition: any = React.forwardRef(function Transition(props, ref) {\r\n  return null;//<Slide direction=\"left\" ref={ref} {...props} />;\r\n});\r\n\r\nexport type PathParamsType = {\r\n  prevPath: string;\r\n};\r\n\r\nexport type OwnProps = {\r\n  backgroundColor?: string;\r\n  title?: string;\r\n  children?: React.ReactNode;\r\n};\r\n\r\nexport type Props = RouteComponentProps<any, any, PathParamsType> & OwnProps;\r\n\r\nconst WindowRoute = (props: Props) => {\r\n  const [isOpened, setIsOpened] = React.useState(true);\r\n  const [isClosed, setIsClosed] = React.useState(false);\r\n  const [stackId, setStackId] = React.useState(-1);\r\n  const { pop, popById, isAtTop, push } = React.useContext(WindowStackContext);\r\n  const { history, location, backgroundColor, title, children } = props;\r\n\r\n  let pose = 'inactive';\r\n\r\n  if (stackId !== -1) {\r\n    if (isAtTop && isAtTop(Number(stackId))) {\r\n      pose = 'active';\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (push) {\r\n      setStackId(push());\r\n    }\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      if (!isClosed && popById && stackId !== -1) {\r\n        popById(stackId);\r\n      }\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [stackId]);\r\n\r\n  const close = () => {\r\n    setIsOpened(false);\r\n    setIsClosed(true);\r\n    if (pop) pop();\r\n    setTimeout(() => {\r\n      if (location.state && location.state.prevPath) {\r\n        history.replace(location.state.prevPath);\r\n      } else history.goBack();\r\n    }, 300);\r\n  };\r\n\r\n  function renderDialogContent() {\r\n    return (\r\n      <PosedContainer\r\n        backgroundcolor={backgroundColor || null}\r\n        pose={pose}\r\n        initialPose=\"active\"\r\n        withParent={false}\r\n      >\r\n        <StyledAppBar>\r\n          <StyledToolbar>\r\n            <div className=\"logo\">\r\n              <img src=\"/images/blockchain.png\" alt=\"\" />\r\n            </div>\r\n            <div className=\"left\">\r\n              <IconButton edge=\"start\" color=\"inherit\" onClick={close}>\r\n                <MDIcon icon=\"chevron-left\" />\r\n              </IconButton>\r\n              <Typography\r\n                data-testid=\"window-route-title\"\r\n                style={{ flex: 1 }}\r\n                variant=\"h6\"\r\n              >\r\n                {title || 'Window Page'}\r\n              </Typography>\r\n            </div>\r\n          </StyledToolbar>\r\n        </StyledAppBar>\r\n        <div className=\"screen-container\">{children}</div>\r\n      </PosedContainer>\r\n    );\r\n  }\r\n\r\n  if (typeof window === 'undefined') return renderDialogContent();\r\n\r\n  return (\r\n    <Dialog\r\n      fullScreen\r\n      open={isOpened}\r\n      onClose={close}\r\n      // TransitionComponent={Transition}\r\n    >\r\n      {renderDialogContent()}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withRouter(WindowRoute);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Skeleton from 'react-loading-skeleton';\r\n\r\nconst Container = styled('div')<{ margin: boolean }>`\r\n  display: block;\r\n\r\n  .item {\r\n    margin: 10px 0;\r\n  }\r\n\r\n  .chips {\r\n    margin: 30px 0;\r\n    display: flex;\r\n\r\n    .chip {\r\n      margin: 10px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst PokemonDetailSkeleton = (props: { margin?: boolean }) => {\r\n  const { margin } = props;\r\n\r\n  return (\r\n    <Container margin={!!margin}>\r\n      <Skeleton width=\"100%\" height=\"300px\" />\r\n      <div className=\"item\">\r\n        <Skeleton width=\"50%\" height={30} />\r\n      </div>\r\n      <div className=\"item\">\r\n        <Skeleton width=\"30%\" height={20} />\r\n      </div>\r\n      <div className=\"chips\">\r\n        <div className=\"chip\">\r\n          <Skeleton width=\"50px\" height={30} />\r\n        </div>\r\n        <div className=\"chip\">\r\n          <Skeleton width=\"50px\" height={30} />\r\n        </div>\r\n        <div className=\"chip\">\r\n          <Skeleton width=\"50px\" height={30} />\r\n        </div>\r\n      </div>\r\n      <div className=\"chips\">\r\n        <div className=\"chip\">\r\n          <Skeleton width=\"50px\" height={30} />\r\n        </div>\r\n        <div className=\"chip\">\r\n          <Skeleton width=\"50px\" height={30} />\r\n        </div>\r\n        <div className=\"chip\">\r\n          <Skeleton width=\"50px\" height={30} />\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PokemonDetailSkeleton;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { convertDashedToReadable } from '../utils';\r\n\r\nconst StyledChip = styled.div`\r\n  margin-right: 10px;\r\n  margin-bottom: 10px;\r\n  background: #fff;\r\n  color: #3fa348;\r\n  border-radius: 100px;\r\n  padding: 5px 15px;\r\n  text-transform: capitalize;\r\n  border: 1px solid #3faf48;\r\n`;\r\n\r\nexport type Props = {\r\n  value: string;\r\n  className?: string;\r\n};\r\n\r\nexport const Chip = (props: Props) => {\r\n  const { value, className } = props;\r\n\r\n  return (\r\n    <StyledChip className={(value)}>\r\n      {convertDashedToReadable(value)}\r\n    </StyledChip>\r\n  );\r\n};\r\n\r\nexport default Chip;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { PokemonContext, PokemonListItem } from '../contexts/PokemonContext';\r\nimport WindowRoute from '../components/WindowRoute';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport MDIcon from '../components/MDIcon';\r\nimport PokemonDetailSkeleton from '../components/PokemonDetailSkeleton';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport {\r\n  MyPokemonContext,\r\n  MyPokemonListItem,\r\n} from '../contexts/MyPokemonContext';\r\nimport { Chip } from '../components/Chip';\r\n\r\nconst Container = styled.div`\r\n  padding: 15px;\r\n  padding-top: 25px;\r\n  padding-bottom: 90px;\r\n  min-height: 100vh;\r\n\r\n  .picture {\r\n    width: 100%;\r\n    height: 300px;\r\n    padding: 10px;\r\n\r\n    span {\r\n      height: 100%;\r\n      width: 100%;\r\n    }\r\n\r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: contain;\r\n      object-position: center;\r\n    }\r\n  }\r\n\r\n  .name {\r\n    font-weight: bold;\r\n    font-size: 15pt;\r\n    text-transform: capitalize;\r\n    margin-top: 20px;\r\n  }\r\n\r\n  .key-value {\r\n    display: block;\r\n    margin: 20px 0;\r\n\r\n    .key {\r\n      font-weight: bold;\r\n    }\r\n\r\n    .value {\r\n      display: flex;\r\n      margin-top: 10px;\r\n      flex-wrap: wrap;\r\n    }\r\n  }\r\n\r\n  .catch-wrapper {\r\n    width: 100%;\r\n    padding: 10px;\r\n    background: white;\r\n    border-top: 1px solid #d0d0d0;\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n\r\n    .catch-icon {\r\n      margin-right: 10px;\r\n    }\r\n\r\n    .owned {\r\n      padding: 5px 0;\r\n\r\n      .owned-label {\r\n        font-size: 11pt;\r\n        text-align: left;\r\n        margin-bottom: 10px;\r\n        font-weight: bold;\r\n      }\r\n\r\n      .nickname-mutation-wrapper {\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        .save-button {\r\n          margin-left: 10px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .not-found {\r\n    font-size: 20pt;\r\n    font-weight: 300;\r\n    text-align: center;\r\n    color: #b5b5b5;\r\n    margin-top: 50px;\r\n\r\n    .icon {\r\n      font-size: 79pt;\r\n      opacity: 0.3;\r\n      display: block;\r\n      margin: auto;\r\n      margin-top: 20px;\r\n    }\r\n  }\r\n\r\n  .bug {background-color: #B1C12E; color: #fff;}\r\n  .dark {background-color: #4F3A2D; color: #fff;}\r\n  .dragon {background-color: #755EDF; color: #fff;}\r\n  .electric {background-color: #FCBC17; color: #fff;}\r\n  .fairy {background-color: #F4B1F4; color: #fff;}\r\n  .fighting {background-color: #823551; color: #fff;}\r\n  .fire {background-color: #E73B0C; color: #fff;}\r\n  .flying {background-color: #A3B3F7; color: #fff;}\r\n  .ghost {background-color: #6060B2; color: #fff;}\r\n  .grass {background-color: #74C236; color: #fff;}\r\n  .ground {background-color: #D3B357; color: #fff;}\r\n  .ice {background-color: #A3E7FD; color: #fff;}\r\n  .normal {background-color: #C8C4BC; color: #fff;}\r\n  .poison {background-color: #934594; color: #fff;}\r\n  .psychic {background-color: #ED4882; color: #fff;}\r\n  .rock {background-color: #B9A156; color: #fff;}\r\n  .steel {background-color: #B5B5C3; color: #fff;}\r\n  .water {background-color: #3295F6; color: #fff;}\r\n`;\r\n\r\ntype ParamsType = {\r\n  name: string;\r\n};\r\n\r\n\r\n\r\nconst Pokemons = (props: RouteComponentProps<ParamsType>) => {\r\n  const {\r\n    pokemon,\r\n    resetPokemon,\r\n    fetchPokemon,\r\n    isFetchingPokemon,\r\n  } = React.useContext(PokemonContext);\r\n  const { catchPokemon, isOwned, updateNickname, release } = React.useContext(\r\n    MyPokemonContext\r\n  );\r\n  const [nickname, setNickname] = React.useState('');\r\n  const nicknameInput = React.useRef<any>(null);\r\n  const { match } = props;\r\n  let ownedPokemon: MyPokemonListItem | null = null;\r\n\r\n  React.useEffect(() => {\r\n    if (fetchPokemon) {\r\n      fetchPokemon(match.params.name);\r\n    }\r\n\r\n    return () => {\r\n      if (resetPokemon) resetPokemon();\r\n    };\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  if (isOwned && pokemon) {\r\n    ownedPokemon = isOwned(pokemon.name);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (ownedPokemon) setNickname(ownedPokemon.nickname);\r\n    // eslint-disable-next-line\r\n  }, [pokemon]);\r\n\r\n  function renderPokemon() {\r\n    if (isFetchingPokemon) return <PokemonDetailSkeleton />;\r\n    if (!pokemon) {\r\n      return (\r\n        <div className=\"not-found\">\r\n          <div>Not Found</div>\r\n          <MDIcon className=\"icon\" icon=\"pokeball\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"picture\">\r\n          <LazyLoadImage\r\n            alt=\"profile picture\"\r\n            placeholderSrc=\"/images/placeholder.png\"\r\n            src={pokemon.image_url}\r\n            effect=\"blur\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"name\">{pokemon.name}</div>\r\n        {ownedPokemon && (\r\n          <div className=\"\">\r\n            Nickname:{' '}\r\n            {ownedPokemon.nickname === ''\r\n              ? \"Haven't named\"\r\n              : ownedPokemon.nickname}\r\n          </div>\r\n        )}\r\n        <div className=\"key-value\">\r\n          <div className=\"key\">Species</div>\r\n          <div className=\"value\">{pokemon.species.name}</div>\r\n        </div>\r\n        <div className=\"key-value\">\r\n          <div className=\"key\">Types</div>\r\n          <div className=\"value\">\r\n            {pokemon.types.map((pokemonType, index: number) => {\r\n              return <Chip key={index} value={pokemonType.type.name} />;\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"key-value\">\r\n          <div className=\"key\">Abilities</div>\r\n          <div className=\"value\">\r\n            {pokemon.abilities.map((pokemonAbility, index: number) => {\r\n              return <Chip key={index} value={pokemonAbility.ability.name} />;\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"key-value\">\r\n          <div className=\"key\">Moves</div>\r\n          <div className=\"value\">\r\n            {pokemon.moves.map((pokemonMove, index: number) => {\r\n              return <Chip key={index} value={pokemonMove.move.name} />;\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"catch-wrapper\">\r\n          {ownedPokemon ? (\r\n            <div\r\n              data-testid=\"pokemon-details-has-owned-message\"\r\n              className=\"owned\"\r\n            >\r\n              <div className=\"owned-label\">You have owned this pokemon</div>\r\n              <div className=\"nickname-mutation-wrapper\">\r\n                <TextField\r\n                  inputRef={nicknameInput}\r\n                  name=\"update-nickname\"\r\n                  variant=\"standard\"\r\n                  color=\"primary\"\r\n                  label=\"Nickname\"\r\n                  data-testid=\"input-nickname\"\r\n                  fullWidth\r\n                  placeholder=\"Type this pokemon nickname\"\r\n                  value={nickname}\r\n                  onChange={e => setNickname(e.target.value)}\r\n                />\r\n\r\n                <Button\r\n                  className=\"save-button\"\r\n                  data-testid=\"save-nickname-button\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    if (updateNickname) updateNickname(pokemon.name, nickname);\r\n                  }}\r\n                >\r\n                  Save\r\n                </Button>\r\n                <Button\r\n                  className=\"save-button\"\r\n                  variant=\"contained\"\r\n                  data-testid=\"release-button\"\r\n                  color=\"secondary\"\r\n                  onClick={() => {\r\n                    if (release) release(pokemon.name);\r\n                  }}\r\n                >\r\n                  Release\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <Button\r\n              fullWidth\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              data-testid=\"catch-button\"\r\n              onClick={async () => {\r\n                if (catchPokemon) {\r\n                  const res = await catchPokemon(pokemon as PokemonListItem);\r\n                  if (res) {\r\n                    setNickname('');\r\n                    nicknameInput?.current?.focus();\r\n                  }\r\n                }\r\n              }}\r\n            >\r\n              <MDIcon className=\"catch-icon\" icon=\"pokeball\" />\r\n              Catch!\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    \r\n    <WindowRoute title={pokemon ? pokemon.name : 'Pokemon Detail'}>\r\n      <Container>{renderPokemon()}</Container>\r\n    </WindowRoute>\r\n  );\r\n};\r\n\r\nexport default Pokemons;\r\n"],"sourceRoot":""}